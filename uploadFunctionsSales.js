const salesAndInventoryFunctions = [
    {
      name: "query_vendor_total_revenue",
      description: "Get the total revenue generated by a specific vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_total_units",
      description: "Get the total number of units sold for a vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_total_profit",
      description: "Get the total profit generated by a vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_average_price",
      description: "Get the average selling price of a vendor's products at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_sales_growth",
      description: "Check a vendor's sales growth over a time period at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" },
          period: { type: "string", enum: ["week", "month"], description: "Time period to measure (week or month)" }
        },
        required: ["store", "vendor", "period"]
      }
    },
    {
      name: "query_vendor_gross_margin",
      description: "Get the gross margin percentage for a vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_average_markup",
      description: "Get the average markup percentage for a vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_units_sold_last_7_days",
      description: "Get the number of units sold for a vendor in the last 7 days at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_weekly_sales",
      description: "Get total revenue generated by a vendor over the last 7 days at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_monthly_sales",
      description: "Get total revenue generated by a vendor over the last 30 days at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_top_categories",
      description: "Get the top product categories by revenue for a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    },
    {
      name: "query_vendor_percent_revenue",
      description: "Get the percentage of total store revenue generated by a vendor.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_unit_share",
      description: "Get the percentage of total units sold by a vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_vendor_total_inventory_value",
      description: "Get the total inventory value for a vendor at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" },
          vendor: { type: "string", description: "Vendor name" }
        },
        required: ["store", "vendor"]
      }
    },
    {
      name: "query_store_inventory_value",
      description: "Get the total inventory value of a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    },
    {
      name: "query_store_inventory_health",
      description: "Analyze the inventory health of a store (fast vs slow movers, overstock, etc.).",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    },
    {
      name: "query_clearance_candidates",
      description: "Identify products that should be considered for clearance at a store based on low velocity.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    },
    {
      name: "query_store_discounted_units",
      description: "Get the total number of discounted units at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    },
    {
      name: "query_store_average_discount",
      description: "Get the average discount percentage across all discounted products at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    },
    {
      name: "query_dead_inventory_products",
      description: "List products with no sales in the last 90+ days at a store.",
      parameters: {
        type: "object",
        properties: {
          store: { type: "string", description: "Store name" }
        },
        required: ["store"]
      }
    }
  ];
  
  module.exports = salesAndInventoryFunctions;
  